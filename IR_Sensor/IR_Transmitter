//#include <IRLib2.h>

const byte ledPins[3] = {11,12,13};
unsigned long prevMicro = 0;
byte code[3] = {0,0,0};
const float pause = 1562.5;
byte inTransmission = 0;

//IRrecvPCI myReciever(2);

/*
Start Pulse     16 HIGH
                8 LOW
Address         (5) 1:1 HIGH:LOW
Data            (3)
End Pulse        1 HIGH

0- 1:1 HIGH:LOW
1- 1:3 HIGH:LOW
 */

// the setup function runs once when you press reset or power the board
void setup() {
  ///////////////////////////////////////////////////
  //Serial.begin(9600);
  //myReciever.enableIRIn();
  //myReciever.blink13(true);
  /////////////////////////////////////////////////
  
  for (int i = 0; i < 3; i++)
    pinMode(ledPins[i],OUTPUT);

  randomSeed(analogRead(0));
  
  for (int i = 0; i < 3; i++)
  {
    code[i] = random(2);
    digitalWrite(ledPins[i],code[i]);
  }
  delay(1000);
}

// the loop function runs over and over again forever
void loop() {
  unsigned long currMicro = micros(); 
  //unsigned long currMicro = millis(); //DEBUGGING ONLY

  /////////////////////////////////////////////////////////////
/*  if (myReciever.getResults())
  {
    Serial.println(recvGlobal.recvLength, DEC);
    for (int i = 1; i < recvGlobal.recvLength; i++)
    {
      Serial.print(recvGlobal.recvBuffer[i], DEC);
      Serial.print(", ");
    }
    Serial.println();
    myReciever.enableIRIn();
  }*/
  /////////////////////////////////////////////////////////////
  
  // 5 seconds has passed, restart transmission
  if (currMicro - prevMicro > 5000000)
  //if (currMicro - prevMicro > 30000) //DEBUGGING ONLY
  {
    inTransmission = 1;
    prevMicro = currMicro;
  }
  
  // Transmission in progress
  if (inTransmission == 1)
  {
    // In start HIGH pulse
    if ( currMicro - prevMicro == 0 )
    {
      digitalWrite(ledPins[2], HIGH);
      digitalWrite(ledPins[1], HIGH);
      digitalWrite(ledPins[0], HIGH);
    }
    // In start LOW pulse, Give 15 uS span
    else if ( (currMicro - prevMicro >= 16 * pause) && (currMicro - prevMicro < (16 * pause)+15) )
      digitalWrite(ledPins[0], LOW);
    
    // In address pulse 1 HIGH
    else if ( (currMicro - prevMicro >= (24 * pause)) && (currMicro - prevMicro < ((24 * pause)+15)) )
    {
      digitalWrite(ledPins[1], LOW);
      digitalWrite(ledPins[0], HIGH);
    }
    // In address pulse 1 LOW
    else if ( (currMicro - prevMicro >= (25 * pause)) && (currMicro - prevMicro < (25 * pause)+15) )
      digitalWrite(ledPins[0], LOW);
    // In address pulse 2 HIGH
    else if ( (currMicro - prevMicro >= 26 * pause) && (currMicro - prevMicro < (26 * pause)+15) )
      digitalWrite(ledPins[0], HIGH);
    // In address pulse 2 LOW
    else if ( (currMicro - prevMicro >= 27 * pause) && (currMicro - prevMicro < (27 * pause)+15) )
      digitalWrite(ledPins[0], LOW);
    // In address pulse 3 HIGH
    else if ( (currMicro - prevMicro >= 28 * pause) && (currMicro - prevMicro < (28 * pause)+15) )
      digitalWrite(ledPins[0], HIGH);
    // In address pulse 3 LOW
    else if ( (currMicro - prevMicro >= 29 * pause) && (currMicro - prevMicro < (29 * pause)+15) )
      digitalWrite(ledPins[0], LOW);
    // In address pulse 4 HIGH
    else if ( (currMicro - prevMicro >= 30 * pause) && (currMicro - prevMicro < (30 * pause)+15) )
      digitalWrite(ledPins[0], HIGH);
    // In address pulse 4 LOW
    else if ( (currMicro - prevMicro >= 31 * pause) && (currMicro - prevMicro < (31 * pause)+15) )
      digitalWrite(ledPins[0], LOW);
    // In address pulse 5 HIGH
    else if ( (currMicro - prevMicro >= 32 * pause) && (currMicro - prevMicro < (32 * pause)+15) )
      digitalWrite(ledPins[0], HIGH);
    // In address pulse 5 LOW
    else if ( (currMicro - prevMicro >= 33 * pause) && (currMicro - prevMicro < (33 * pause)+15) )
      digitalWrite(ledPins[0], LOW);

    // In data pulse 1 HIGH
    else if ( (currMicro - prevMicro >= 34 * pause) && (currMicro - prevMicro < (34 * pause)+15) )
      digitalWrite(ledPins[0], HIGH);
    // In data pulse 1 LOW
    else if ( (currMicro - prevMicro >= 35 * pause) && (currMicro - prevMicro < ((35) * pause)+15) )
      digitalWrite(ledPins[0], LOW);

    // In data pulse 2 HIGH
    else if ( (currMicro - prevMicro >= (36 + 2*code[0])* pause) && (currMicro - prevMicro < ((36 + 2*code[0])* pause)+15 ) )
      digitalWrite(ledPins[0], HIGH);
    // In data pulse 2 LOW
    else if ( (currMicro - prevMicro >= (37 + 2*code[0])* pause) && (currMicro - prevMicro < ((37 + 2*code[0])* pause)+15 ) )
      digitalWrite(ledPins[0], LOW);

    // In data pulse 3 HIGH
    else if ( (currMicro - prevMicro >= (38 + 2*code[0] + 2*code[1])* pause) && (currMicro - prevMicro < ((38 + 2*code[0] + 2*code[1])* pause)+15 ) )
      digitalWrite(ledPins[0], HIGH);
    // In data pulse 3 LOW
    else if ( (currMicro - prevMicro >= (39 + 2*code[0] + 2*code[1])* pause) && (currMicro - prevMicro < ((39 + 2*code[0] + 2*code[1])* pause)+15 ) )
      digitalWrite(ledPins[0], LOW);

    // In Exit pulse
    else if ( (currMicro - prevMicro >= (40 + 2*code[0] + 2*code[1] + 2*code[2])* pause) && (currMicro - prevMicro < ((40 + 2*code[0] + 2*code[1] + 2*code[2])* pause)+15 ) )
    {
      digitalWrite(ledPins[1], HIGH);
      digitalWrite(ledPins[0], HIGH);
    }
    
    // Terminate transmission
    else if ( (currMicro - prevMicro >= (41 + 2*code[0] + 2*code[1] + 2*code[2])* pause) && (currMicro - prevMicro < ((45 + 2*code[0] + 2*code[1] + 2*code[2])* pause)+15 ) )
    {
      inTransmission = 0;
      digitalWrite(ledPins[2], LOW);
      digitalWrite(ledPins[1], LOW);
      digitalWrite(ledPins[0], LOW);
    }
  } // End if( inTransmission )
  
}
